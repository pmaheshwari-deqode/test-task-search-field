{"version":3,"sources":["mockServer.js","components/SearchField/SearchField.js","components/AutoSuggestSearchField/AutoSuggestSearchField.js","App.js","reportWebVitals.js","index.js"],"names":["getRandomBool","n","maxRandomCoeff","Math","floor","random","useStyles","makeStyles","rootContainer","width","padding","matchingText","color","noResultsFound","display","margin","lineBreak","SearchField","searchHandler","dropdownOptions","isLoading","lastSearchedStr","classes","useState","openDropDown","setOpenDropdown","searchInput","setSearchInput","prevInput","setPrevInput","noResults","showNoResults","useEffect","length","Boolean","getLastStr","str","values","split","filter","opt","className","Autocomplete","open","onClose","onOpen","value","getOptionSelected","option","popupIcon","options","loading","onChange","event","val","join","renderOption","before","after","renderInput","params","TextField","label","variant","target","last","InputProps","defaultProps","noop","AutoSuggestSearchField","setOptions","isFetching","setFetching","setLastSearchedStr","postSearchActions","debounceFunc","useCallback","debounce","text","post","results","push","Promise","resolve","reject","randomTimeout","setTimeout","getSuggestions","then","err","console","error","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.be2eda99.chunk.js","sourcesContent":["// ================================= Mock Server Start =============================\r\nvar FAILURE_COEFF = 10;\r\nvar MAX_SERVER_LATENCY = 200;\r\n\r\nfunction getRandomBool(n) {\r\n  var maxRandomCoeff = 1000;\r\n  if (n > maxRandomCoeff) n = maxRandomCoeff;\r\n  return Math.floor(Math.random() * maxRandomCoeff) % n === 0;\r\n}\r\n\r\nexport function getSuggestions(text) {\r\n  var pre = \"pre\";\r\n  var post = \"post\";\r\n  var results = [];\r\n  if (getRandomBool(2)) {\r\n    results.push(pre + text);\r\n  }\r\n  if (getRandomBool(2)) {\r\n    results.push(text);\r\n  }\r\n  if (getRandomBool(2)) {\r\n    results.push(text + post);\r\n  }\r\n  if (getRandomBool(2)) {\r\n    results.push(pre + text + post);\r\n  }\r\n  return new Promise((resolve, reject) => {\r\n    var randomTimeout = Math.random() * MAX_SERVER_LATENCY;\r\n    setTimeout(() => {\r\n      if (getRandomBool(FAILURE_COEFF)) {\r\n        reject();\r\n      } else {\r\n        resolve(results);\r\n      }\r\n    }, randomTimeout);\r\n  });\r\n}\r\n// ================================= Mock Server End =============================\r\n","import React, { useEffect, useState } from \"react\";\r\nimport { noop } from \"lodash\";\r\nimport PropTypes from \"prop-types\";\r\nimport { TextField, makeStyles } from \"@material-ui/core\";\r\nimport Autocomplete from \"@material-ui/lab/Autocomplete\";\r\n\r\nconst useStyles = makeStyles({\r\n  rootContainer: {\r\n    width: \"500px\",\r\n    padding: \"20px\"\r\n  },\r\n  matchingText: {\r\n    color: \"red\"\r\n  },\r\n  noResultsFound: {\r\n    color: \"red\",\r\n    display: \"block\",\r\n    margin: \"3px\",\r\n    lineBreak: \"anywhere\"\r\n  }\r\n});\r\n\r\nconst SearchField = ({ searchHandler, dropdownOptions, isLoading, lastSearchedStr }) => {\r\n  const classes = useStyles();\r\n  const [openDropDown, setOpenDropdown] = useState(false);\r\n  const [searchInput, setSearchInput] = useState(\"\");\r\n  const [prevInput, setPrevInput] = useState(\"\");\r\n  const [noResults, showNoResults] = useState(false);\r\n\r\n  const shouldOpenDropdown = () => {\r\n    // Checking whether dropdown should be open by default\r\n    if (dropdownOptions.length && !isLoading) {\r\n      setOpenDropdown(true);\r\n      showNoResults(false);\r\n    } else if (Boolean(searchInput) && !isLoading) {\r\n      setOpenDropdown(false);\r\n      showNoResults(true);\r\n    }\r\n  };\r\n\r\n  useEffect(shouldOpenDropdown, [dropdownOptions, isLoading]);\r\n\r\n  const getLastStr = (str = searchInput) => {\r\n    // Fetching last string\r\n    const values = str.split(\" \").filter(opt => Boolean(opt));\r\n    return values[values.length - 1];\r\n  }\r\n\r\n  return (\r\n    <div className={classes.rootContainer}>\r\n      <Autocomplete\r\n        open={Boolean(openDropDown && dropdownOptions.length)}\r\n        onClose={() => setOpenDropdown(false)}\r\n        onOpen={() => setOpenDropdown(true)}\r\n        value={searchInput}\r\n        getOptionSelected={(option, value) => option === value}\r\n        popupIcon={null}\r\n        options={dropdownOptions}\r\n        loading={isLoading}\r\n        onChange={(event, value) => {\r\n          // Adding space to the end of the selected\r\n          let values = searchInput.split(\" \").filter(opt => Boolean(opt));\r\n          values[values.length - 1] = value;\r\n          const val = value ? values.join(\" \") + \" \" : \"\";\r\n          setSearchInput(val);\r\n          setPrevInput(val);\r\n          if (!Boolean(val)) searchHandler(\"\");\r\n          if (!Boolean(value) && noResults) showNoResults(false);\r\n        }}\r\n        renderOption={option => {\r\n          // Highlighting matching sub-string\r\n          const [before, after] = option.split(lastSearchedStr);\r\n          return (\r\n            <span>\r\n              {before}\r\n              <span className={classes.matchingText}>{lastSearchedStr}</span>\r\n              {after}\r\n            </span>\r\n          )\r\n        }}\r\n        renderInput={params => (\r\n          <TextField\r\n            {...params}\r\n            label=\"Search\"\r\n            variant=\"outlined\"\r\n            onChange={({ target }) => {\r\n              setSearchInput(target.value);\r\n              setPrevInput(target.value);\r\n              const last = getLastStr(target.value);\r\n              if (getLastStr(prevInput) !== last) searchHandler(getLastStr(target.value));\r\n              else setOpenDropdown(false)\r\n              setPrevInput(target.value);\r\n            }}\r\n            InputProps={{\r\n              ...params.InputProps\r\n            }}\r\n          />\r\n        )}\r\n      />\r\n      <span className={classes.noResultsFound}>\r\n        {noResults && !isLoading\r\n          ? `No results found for '${lastSearchedStr}'`\r\n          : null}\r\n      </span>\r\n    </div>\r\n  );\r\n};\r\n\r\nSearchField.propTypes = {\r\n  searchHandler: PropTypes.func,\r\n  dropdownOptions: PropTypes.arrayOf(PropTypes.string),\r\n  isLoading: PropTypes.bool,\r\n  lastSearchedStr: PropTypes.string\r\n};\r\n\r\nSearchField.defaultProps = {\r\n  searchHandler: noop(),\r\n  dropdownOptions: [],\r\n  isLoading: false,\r\n  lastSearchedStr: \"\"\r\n};\r\n\r\nexport default SearchField;\r\n","import React, { useState, useCallback } from \"react\";\r\nimport { debounce } from \"lodash\";\r\nimport { getSuggestions } from \"../../mockServer\";\r\nimport SearchField from \"../SearchField\";\r\n\r\nconst AutoSuggestSearchField = () => {\r\n  const [options, setOptions] = useState([]);\r\n  const [isFetching, setFetching] = useState(false);\r\n  const [lastSearchedStr, setLastSearchedStr] = useState(\"\");\r\n\r\n  const postSearchActions = (str = \"\") => {\r\n    // Actions to be performed either on success or error of data fetching.\r\n    // Updating last searched string and isFetching option.\r\n    setLastSearchedStr(str);\r\n    setFetching(false);\r\n  }\r\n\r\n  const fetchData = (value) => {\r\n    getSuggestions(value).then(\r\n      results => {\r\n        // Success\r\n        setOptions(results);\r\n        postSearchActions(value);\r\n      },\r\n      err => {\r\n        // Error\r\n        console.error(\"There was some error while fetching results.\");\r\n        postSearchActions(value);\r\n      }\r\n    );\r\n  }\r\n  const debounceFunc = useCallback(debounce(fetchData, 500), []);\r\n\r\n  const searchHandler = (value = \"\") => {\r\n    setOptions([]);\r\n    if (value !== \"\"){\r\n      setFetching(true);\r\n      debounceFunc(value);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <SearchField\r\n      searchHandler={searchHandler}\r\n      isLoading={isFetching}\r\n      dropdownOptions={options}\r\n      lastSearchedStr={lastSearchedStr}\r\n    />\r\n  );\r\n}\r\n\r\nexport default AutoSuggestSearchField;","import React from \"react\";\nimport AutoSuggestSearchField from \"./components/AutoSuggestSearchField\";\n\nfunction App() {\n  return <AutoSuggestSearchField />;\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}